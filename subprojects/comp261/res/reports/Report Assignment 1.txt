Comp261, Assignment 1 - Henry Wylde (300224283)

Basic description of classes:
--

Core
  MainFrame
    MapPanel
      GeographyMap
        DirectedGraph
          SortedArraySet
        SearchVertex
        QuadTree
          SortedArraySet
        Node
        Road
        RoadSegment

The Core class just holds basic static methods and has the main(...) method in it, creating a new instance of MainFrame.

MainFrame sets up the basic JFrame that this project uses, initializing the menu bar and adding a MapPanel to it.
On the menu bar, the options are as follows:
File
  Verbose - If ticked, the program will output information when searching for the quickest path between 2 nodes. It will output searching information on the algorithms and a compacted summary of the roads to travel by with the length of time to travel on them.
  -
  Exit - Exits the program
Map
  Load Nodes - Attempts to loads the nodes with a default path, if the file isn't found it will ask for the proper .tab file path.
  Load Roads - Attempts to loads the roads with a default path, if the file isn't found it will ask for the proper .tab file path.
  Load Road Segments - Attempts to loads the road segments with a default path, if the file isn't found it will ask for the proper .tab file path.
  -
  Regenerate Map - Regenerates the map image for drawing.
  -
  Draw Nodes - If ticked, the map image will draw black dots at the location of each node.
  Draw Roads - If ticked, the map will draw gray lines for each road segment.
  Draw Shortest Path - If ticked, the map will draw a blue line for the quickest path (if one has been found). By default red dots will be drawn at clicked locations on the map for when picking 2 nodes to find the quickest path between.
Searching
  Reset Path Data - Resets the quickest path data (mouse click positions, current shortest path in memory.
  -
  Use A* - If toggled, will use A* algorithm to find the quickest path.
  Use Dijkstra - If toggled, will use Dijkstra's algorithm to find the quickest path.
  -
  Travel by Any Method - Travel by any method. Max travel speed is that of a car.
  Travel by Car - Travel only by car. Max travel speed is that of a car.
  Travel as Pedestrian - Travel as a pedestrian. Max travel speed is 10.0 km/h.
  Travel by Bicycle - Travel by a bicycle. Max travel speed is 10.0 km/h.
  
  (Note: By changing the travel method, it will also redraw the map to only show roads useable by that travel method.)

The MapPanel is a panel which takes care of drawing the Auckland map based on the graph that the data makes. It also takes care of user input from either the menubar in MainFrame (methods are called to change settings in MapPanel from MainFrame) or for clicking information for the select 2 points to find the quickest path between them feature.

The GeographyMap class holds the data for all of the Auckland road nodes, roads and road segments. It creates a directed graph based on these, taking into account one way information on roads (by means of: if the road is not one way, it will add another edge going from <end> to <src> vertex as well as from <src> to <end>). It also has a QuadTree which contains information on where nodes are by placing node indices in this data structure so it is easy to search a certain area or rectangular bounds for any node indices that are within those bounds (this is used for the ability for the user to click on 2 nodes to search for quickest path between them).

The MapPanel will draw the image of the map generated from the GeographyMap's "generateMap(...)" method. This method creates an Image based on settings such as whether to draw all the connecting road segments, nodes or shortest path. The reason I generate an Image rather than just override the paint(...) method in MapPanel is because of resize events of the window. By not generating an image, I found that it really slowed down the program having to redraw all of the nodes and road segments onto the MapPanel whenever the user resizes the window, so instead I generate an image whenever a setting changes and whenever the window is resized all I do is resize the image that has already been generated, this cuts down the cost of it significantly and speeds up the program. If for some reason the image messes up or doesn't regenerate, there is a "Regenerate Map" button in the menubar under "Map".

What the code does and doesn't do:
--

Core:
The code by default uses an A* algorithm to find the quickest path between 2 nodes. It uses a heuristic cost based on the shortest distance between a given node and the end node then calculating the cost to travel that distance using the fastest possible methods to ensure that it is always lower than the actual cost (what this means, is it will use the "calculateCost(...)" method with the maximum speed limit of roads: 160.0 km/h and a road class of 4). (Side node: for the speed zone of "0" (no speed limit) I have used a speed limit of 160.0 km/h.)

Extension:
The costs for finding the quickest path between 2 nodes includes speed zone and road class data. The one way data is included in generating the graph (the initRoadMap() method) and not for <Travel Method> data is included in the searching by not adding road segment edges if they can't be travelled on with the selected travel method.

Challenge:
The output of the program can be toggled with the verbose mode under "File". This makes the program output details about enqueueing and dequeueing in the GraphSearch methods, and it also outputs a compacted summary of the travel path, with the time taken to travel between those 2 nodes.

Little status notes about what the program is doing at any given time can be seen in the status bar (down the bottom). These will tell you the coordinates of your mouse click when searching the graph, and whether or not a quickest path was found.

A map image is generated so it is easy to see the nodes and roads connecting them. It also shows you the shortest path as a blue line when one has been selected. Another feature has also been included: the user may click anywhere on the map and it will try to find a node close to that point (it will only find nodes within a 4x4 bounding rectangle), then it will draw a red dot at that point. By selecting a second point, the program will attempt to try find the quickest path between the 2 nodes. Once it has done this, the user may either click "Reset Path Information" or just click again somewhere which has the same effect.

Restriction information was taken into account. The restriction information is loaded into a map from the intersection node ID to the RoadRestriction, and when searching for the quickest path if any path that it attempts to go down fits a RoadRestriction, it won't add it to the fringe that it is searching through.

The program has not included information on traffic lights.

Important data structures used:
--

DirectedGraph
A directed graph is used to represent the road map of auckland, with the nodes (intersections of roads) as vertices and the road segments (a length of road that links 2 nodes) as edges. The graph implementation I wrote is simple: it just contains an index number for each vertex and each edge is linked between 2 nodes and holds an index number as well. Seperate methods for searching the graph need to be implemented elsewhere as the graph class I wrote doesn't include any weight data on the edges.

PriorityQueue
A priority queue is used for the search methods for the graph. The reason a priority queue is used is for the ordering it imposes on the data. Nodes / edges with a lower cost + costSoFar + heuristicCost are prioritised as they will correspond to most likely being the shortest path between the start and end nodes. The priority queue uses the compareTo function defined in the SearchVertex class.

QuadTree
A 4-ary tree that is used for spatial data. Set it's size to some rectangular bounds and insert indices into certain points / bounds. Allows for easy searching of indices in any given area. The QuadTree is used to hold data on where all the nodes are so that it is easy to find which node the user clicks on when a mouse click event is triggered.
Written in Comp103 by myself.

SortedArraySet
A sorted set implementation using an array that doesn't allow nulls. This is used in the QuadTree to hold the index values at the bottom layer of the QuadTree, and used in the DirectedGraph to store all of the vertices (as the graph only used integers for each vertex).
Written by myself with reference from http://code.google.com/p/google-collections/source/browse/trunk/src/com/google/common/collect/SortedArraySet.java?r=4.

Pseudocode for the main search:
--

A*:

if (!start.exists || !end.exists)
  exit

Initialize fringe PriorityQueue
Initialize nodeVisited Map

fringe.add(start, 0, heuristicCost(start, end))

Do while (fringe size != 0)
  SearchVertex sv = fringe.poll
  
  if (sv == end)
    return (sv path)
  
  if (nodeVisited contains sv) 
    goto nextSV
    
  nodeVisited.add(sv, true);
  
  for each (edge : sv.outgoingEdges)
    Vertex neighbour = edge.end
    if (nodeVisited contains neighbour)
      goto nextEdge
      
    if (!edge.road.allows(travelMethod) || roadRestrictionFrom(sv, neighbour))
      goto nextEdge
 
    fringe.add(neighbour, edge.cost, heuristicCost(neighbour, end))

return no path found

Path cost and heuristic estimate:
--

Original:
The path cost was simply using the length of the road segment that was provided with the data on road segments. This road segment length was always greater than or equal to the euclidean distance between the two nodes it was between, so it was possible to use the length() method between 2 Point2Ds (which is, root((x1-x2)^2 + (y1-y2)^2). This provided a consistant and always lower heuristic cost.

Final:
The final path cost took into account distance, road speed limits and road class. The cost first calculates the time it takes to get from one node to another based on distance / maximum speed (where if the travel method was walking or cycling, the maximum speed was 10km/h, and for no speed limit on roads, the maximum speed was set to 160km/h). It then simiply divides this cost by a factor based on the road class that was determined by a few trial and errors of what seemed to produce decent results. The heuristic cost must always be lower or equal to the actual cost, so the heuristic cost is calculated with using the maximum speed possible (0 on a road, which corresponds to 160km/h for cars) and the highest road class possible (4), this meant that it was always still a lower cost than the actual cost.

Testing:
--

Testing methods I used involved:
For testing that the drawing methods were correct, I just compared the image generated to an image of Auckland. Originally the image drawn was flipped both horizontally and vertically, this was fixed by changing the drawing direction and accounting for the negative y-coordinate value.

For testing that the dijkstras search method was correctly working, I made it draw on to the generated map image the path it found, then by looking at the distance it calculated to cross a certain path between 2 nodes, the shortest path that it had found, it was possible to see that they looked feasible. Comparing results to different people confirmed the results were correct. When moving on to A*, I made sure the heuristic cost was a lower bound than the actual cost, then compared it's result to the result of dijkstras algorithm to ensure it was correctly finding the shortest route.
When changing the cost over to use time instead of distance, I calculated the time taken for the new A* method, and the old one which found the shortest distance path. It was then possible to see that it had found a shorter path based on time, which was what was required.

For testing that the clicked nodes were correct with the QuadTree and mouse click events, whenever a node was clicked I would also draw a big circle around that node, at first the node when clicked drew a circle offset from where the mouse actually was. This was fixed by changing the scaleVectorTo & scaleVectorFrom methods to correctly scale the vectors to / from the map coordinates as before they were incorrect due to it being possible to resize the frame. It works now for any size frame though.