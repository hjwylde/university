Comp261, Assignment 2 - Henry Wylde (300224283)

Basic description of classes:
--

Core
  AssignmentTasks
    StringSearch
    Trie

The Core class just holds basic static methods and has the main(...) method in it, creating a new instance of AssignmentTasks which runs the program.

AssignmentTasks will request the user for a root directory containing all the txt files for reading, then it will ask for a phrases file for reading, if either of these fail to be loaded / parsed, then it will exit. It then runs "taskOne()" and "taskTwo()".

TaskOne():
This method just uses 3 different searching methods to search all of the loaded texts (in the "Map<File, String> documents") for the phrases in "phrasesList" and creates a map of counts for them. This map is then saved to a tab delimiter file in the format stated (except I used tab instead of space) in the same root directory of the text files. The method also outputs the different times for each searching method.
@See (a.)

TaskTwo():
This method uses the counts that were found for each phrase in order to compare 2 documents using a cosine similarity method. It then uses this data in conjunction with a priority queue to find the top 3 similar documents for each document loaded, and outputs it.
These were the results:
macbeth.txt
	allswell.txt: 0.6469239308927112
	cleopatra.txt: 0.6448539103519519
	lear.txt: 0.6357440369276074

asyoulikeit.txt
	merchant.txt: 0.733217887747268
	merry_wives.txt: 0.7181753895091504
	much_ado.txt: 0.7135037208929395

lear.txt
	allswell.txt: 0.7760591693113931
	timon.txt: 0.7058051905994127
	othello.txt: 0.6946481149312367

titus.txt
	romeo_juliet.txt: 0.6608746031424308
	henryvi2.txt: 0.6194363107259331
	cleopatra.txt: 0.6083436589118315

henryvi1.txt
	richardiii.txt: 0.6750877207413776
	henryvi2.txt: 0.6380165052133381
	henryiv1.txt: 0.6115349513489244

coriolanus.txt
	cymbeline.txt: 0.6448251973707985
	julius_caesar.txt: 0.6098840637742658
	measure.txt: 0.6055725671606403

henryiv2.txt
	much_ado.txt: 0.7080354664997003
	henryiv1.txt: 0.7020814632065375
	measure.txt: 0.6983361816587128

taming_shrew.txt
	asyoulikeit.txt: 0.6826190859979621
	romeo_juliet.txt: 0.6806344543473868
	twelfth_night.txt: 0.6610189255960487

troilus_cressida.txt
	julius_caesar.txt: 0.6975579690968247
	othello.txt: 0.674436264224093
	henryiv1.txt: 0.6603302526983397

merry_wives.txt
	much_ado.txt: 0.7232890708976618
	asyoulikeit.txt: 0.7181753895091504
	merchant.txt: 0.7002486618473089

lll.txt
	romeo_juliet.txt: 0.6098321600481453
	henryv.txt: 0.6094738789385842
	measure.txt: 0.6004824817284455

midsummer.txt
	much_ado.txt: 0.6694691962107798
	merchant.txt: 0.6642265158711833
	julius_caesar.txt: 0.6542537634840166

othello.txt
	cymbeline.txt: 0.705286253564191
	much_ado.txt: 0.7037699893695818
	allswell.txt: 0.7017727654058429

henryiv1.txt
	allswell.txt: 0.7111387877767937
	henryviii.txt: 0.7082633682785976
	henryiv2.txt: 0.7020814632065375

hamlet.txt
	othello.txt: 0.6827518054287759
	winters_tale.txt: 0.6824148949428621
	measure.txt: 0.6536654662471547

cleopatra.txt
	cymbeline.txt: 0.7173239511789604
	julius_caesar.txt: 0.6822472449093078
	romeo_juliet.txt: 0.6741820776221842

julius_caesar.txt
	cymbeline.txt: 0.7002800985885383
	troilus_cressida.txt: 0.6975579690968247
	twelfth_night.txt: 0.6907206952409992

two_gentlemen.txt
	romeo_juliet.txt: 0.6543344638017382
	asyoulikeit.txt: 0.6320855788213406
	troilus_cressida.txt: 0.6179252416053684

romeo_juliet.txt
	taming_shrew.txt: 0.6806344543473868
	cleopatra.txt: 0.6741820776221842
	julius_caesar.txt: 0.6643675575686974

allswell.txt
	lear.txt: 0.7760591693113931
	henryiv1.txt: 0.7111387877767937
	othello.txt: 0.7017727654058429

john.txt
	asyoulikeit.txt: 0.6818349491746648
	julius_caesar.txt: 0.6480652147953175
	twelfth_night.txt: 0.6308336733913695

tempest.txt
	othello.txt: 0.6295025836875453
	henryiv1.txt: 0.6252384197158449
	julius_caesar.txt: 0.6231321488264271

henryv.txt
	julius_caesar.txt: 0.6744253096731759
	much_ado.txt: 0.6669128852612072
	merry_wives.txt: 0.6632699397834043

cymbeline.txt
	cleopatra.txt: 0.7173239511789604
	othello.txt: 0.705286253564191
	julius_caesar.txt: 0.7002800985885383

henryviii.txt
	henryiv1.txt: 0.7082633682785976
	lear.txt: 0.6860558084807917
	allswell.txt: 0.6818316935162247

much_ado.txt
	merry_wives.txt: 0.7232890708976618
	asyoulikeit.txt: 0.7135037208929395
	merchant.txt: 0.7132447111237941

merchant.txt
	asyoulikeit.txt: 0.733217887747268
	much_ado.txt: 0.7132447111237941
	merry_wives.txt: 0.7002486618473089

richardiii.txt
	lear.txt: 0.6833952270420608
	henryiv1.txt: 0.6769965204897379
	henryvi1.txt: 0.6750877207413776

winters_tale.txt
	cymbeline.txt: 0.6946548278577345
	lear.txt: 0.6931531068366411
	henryiv1.txt: 0.6838901666943333

comedy_errors.txt
	twelfth_night.txt: 0.6941054556269023
	asyoulikeit.txt: 0.6855653386677834
	julius_caesar.txt: 0.6648093208251786

richardii.txt
	henryvi2.txt: 0.6268040262198424
	henryiv1.txt: 0.601042775970387
	henryiv2.txt: 0.595805607757077

henryvi2.txt
	richardiii.txt: 0.6529508725428561
	henryvi1.txt: 0.6380165052133381
	richardii.txt: 0.6268040262198424

timon.txt
	lear.txt: 0.7058051905994127
	allswell.txt: 0.6905411035482595
	richardiii.txt: 0.6498826925648472

measure.txt
	henryiv2.txt: 0.6983361816587128
	lear.txt: 0.6844237541677659
	winters_tale.txt: 0.6710335040309137

twelfth_night.txt
	much_ado.txt: 0.7124741708068265
	comedy_errors.txt: 0.6941054556269023
	allswell.txt: 0.6931172922179543

henryvi3.txt
	henryvi1.txt: 0.5993361661380462
	julius_caesar.txt: 0.5938700618875843
	richardiii.txt: 0.5834125100883837

sonnets.txt
	henryvi1.txt: 0.5087688447264411
	taming_shrew.txt: 0.5056947823063489
	romeo_juliet.txt: 0.4937989005902716

venus_and_adonis.txt
	coriolanus.txt: 0.42827408982292875
	taming_shrew.txt: 0.40933236834817066
	midsummer.txt: 0.35278571874292836

pericles.txt
	henryiv2.txt: 0.5870148425069924
	henryiv1.txt: 0.5722608254108557
	allswell.txt: 0.5696797861275684

elegy.txt
	asyoulikeit.txt: 0.29319630908939914
	much_ado.txt: 0.27595234860325274
	john.txt: 0.26663591458599395

StringSearch contains the string searching algorithms for Knuth Morris Pratt and Boyer Moore (BM code was taken from a source referenced in the class file). It's possible to switch between the two for the purpose of testing the times between them, Boyer Moore is the default though.

Trie is a trie implementation which allows you to add words and search a string for all of the words in the trie. It will return a map which contains a mapping from the search needle word to an array of indices of where that word was found within the string / haystack.

Observations:
--

I found the comparasons to be reasonably useful, as it provided intuitive results for some texts, while showing that other texts either weren't similar, or the search phrases were not optimal for use with them. An example of an intuitive result is:
henryiv1.txt
	allswell.txt: 0.7111387877767937
	henryviii.txt: 0.7082633682785976
	henryiv2.txt: 0.7020814632065375
  
You would expect the texts that are to do with King Henry to be similar to each other, which is evident by this comparason as 2 of the Henry texts were in the top 3 for another Henry text.

An example of a not so useful comparason:
elegy.txt
	asyoulikeit.txt: 0.29319630908939914
	much_ado.txt: 0.27595234860325274
	john.txt: 0.26663591458599395
  
This result is not quite so useful as it is unknown whether the text has low cosine simularities because it isn't similar, or because the phrases searched for are uncommon in the texts and don't provide an accurate representation of the text.
  
Extensions:
--

The extension done was one which compared the times of the different search algorithms. In the code, it is possible to uncomment the Knuth Morris Pratt string search part to output the time that that method takes if wanted.
The tests I ran outputed:
a.
Total time for Boyer Moore: 6449ms.
Total time for Knuth Morris Pratt: 26347ms.
Total time for Trie: 419ms.

This shows that for searching for multiple strings within a document, a trie is the favourable search method as it was much quicker than the others, as the other 2 had to search through the document n times, where n is the number of strings trying to find, while for a trie it only had to search through the entire document once.
Boyer Moore was much faster than Knuth Morris Pratt as well, probably assisted by the fact that the strings being searched for were of a medium length, rather than single words. When the string being searched for is larger, Boyer Moore has better results as it's best case time is O(m / n) where n is the length of the search string and m is the length of the text being searched in.

Testing:
--

The code was tested gradually: first by checking that the KMP generated correct tables for various strings (checking against manual table generation), then checking that it returned the same index of a first match as the Boyer Moore code (which was sourced from somewhere else), which showed that it was correct. Then to check that both the Boyer Moore / KMP search methods and the Trie were returning the same counts for each phrase, a simple "Map.equals" check was used to see whether the keys and values were all identical, which was true so it showed that both methods were accurate and provided correct results. While creating the trie simple testing of add / remove / contains was done on basic strings (such as Hello, hell, Hell, he llo) and the code was modified if errors were found (at first they were, by removing "Hell" "Hello" was also removed accidentally, this was remedied).
